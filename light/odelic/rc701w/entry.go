package rc701w

import (
	"errors"

	"github.com/dash-app/remote-go/appliances"
	"github.com/dash-app/remote-go/hex"
)

func (r *rc701w) Generate(req *appliances.Request) ([]*hex.HexCode, error) {
	e := req.Light()
	switch e.Action {
	case "OFF":
		return []*hex.HexCode{
			{
				Format: hex.RAW,
				Raw: []int{
					9620, 4830, 589, 553, 589, 553, 589, 553, 589, 553, 589, 553, 589, 553, 589, 553, 589, 1811, 589, 1811, 589, 553, 589, 1811, 589, 553, 589, 553, 589, 553, 589, 1811, 589, 1811, 589, 553, 589, 553, 589, 553, 589, 1811, 589, 553, 589, 553, 589, 553, 589, 553, 589, 1811, 589, 1811, 589, 1811, 589, 553, 589, 1811, 589,
					1811, 589, 1811, 589, 1811, 589, 54405, 9620, 4830, 589, 657, 589, 657, 589, 1811, 589, 657, 589, 657, 589, 657, 589, 657, 589, 1811, 589, 1811, 589, 553, 589, 657, 589, 657, 589, 1811, 589, 657, 589, 1811, 589,
					657, 589, 657, 589, 657, 589, 657, 589, 1811, 589, 657, 589, 657, 589, 657, 589, 657, 589, 1811, 589, 1811, 589, 1811, 589, 657, 589, 1811, 589, 1811, 589, 1811, 589, 1811, 589,
				},
			},
		}, nil

	case "ON":
		return []*hex.HexCode{
			{
				Format: hex.RAW,
				Raw: []int{
					9612, 4835, 576, 554, 576, 554, 576, 554, 576, 554, 576, 554, 576, 554, 576, 554, 576, 1821, 576, 1821, 576, 554, 576, 1821, 576, 554, 576, 554, 576, 554, 576, 1821, 576, 1821, 576, 554, 576, 1821, 576, 554, 576, 1821, 576, 1821, 576, 554, 576, 554, 576, 1821, 576, 1821, 576, 554, 576, 1821, 576, 554, 576, 554, 576, 1821, 576, 1821, 576, 554, 576, 54405, 9612, 4835, 576, 679, 576, 679, 576, 1821, 576, 679, 576, 679, 576, 679, 576, 679, 576, 1821, 576, 1821, 576, 679, 576, 679, 576, 679, 576, 1821, 576, 679, 576, 1821, 576, 679, 576, 679, 576, 1821, 576, 679, 576, 1821, 576, 1821, 576, 679, 576, 679, 576, 1821, 576, 1821, 576, 679, 576, 1821, 576, 679, 576, 679, 576, 1821, 576, 1821, 576, 679, 576,
				},
			},
		}, nil
	case "NIGHT_LIGHT":
		return []*hex.HexCode{
			{
				Format: hex.RAW,
				Raw: []int{
					9618, 4830, 585, 556, 585, 556, 585, 556, 585, 556, 585, 556, 585, 556, 585, 556, 585, 1810, 585, 1810, 585, 556, 585, 1810, 585, 556, 585, 556, 585, 556, 585, 1810, 585, 1810, 585, 556, 585, 1810, 585, 556, 585, 1810, 585, 556, 585, 1810, 585, 556, 585, 556, 585, 1810, 585, 556, 585, 1810, 585, 556, 585, 1810, 585, 556, 585, 1810, 585, 1810, 585, 54405, 9618, 4830, 585, 556, 585, 556, 585, 1810, 585, 674, 585, 674, 585, 674, 585, 674, 585, 1810, 585, 1810, 585, 674, 585, 674, 585, 674, 585, 1810, 585, 674, 585, 1810, 585, 674, 585, 674, 585, 1810, 585, 674, 585, 1810, 585, 674, 585, 1810, 585, 674, 585, 674, 585, 1810, 585, 674, 585, 1810, 585, 674, 585, 1810, 585, 674, 585, 1810, 585, 1810, 585,
				},
			},
		}, nil

	case "FAV":
		return []*hex.HexCode{
			{
				Format: hex.RAW,
				Raw: []int{
					9595, 4862, 556, 570, 556, 570, 556, 570, 556, 570, 556, 570, 556, 570, 556, 570, 556, 1846, 556, 1846, 556, 570, 556, 1846, 556, 570, 556, 570, 556, 570, 556, 1846, 556, 1846, 556, 570, 556, 1846, 556, 1846, 556, 1846, 556, 570, 556, 1846, 556, 570, 556, 570, 556, 1846, 556, 570, 556, 570, 556, 570, 556, 1846, 556, 570, 556, 1846, 556, 1846, 556, 54440, 9595, 4862, 556, 698, 556, 698, 556, 1846, 556, 698, 556, 698, 556, 698, 556, 698, 556, 1846, 556, 1846, 556, 698, 556, 698, 556, 698, 556, 1846, 556, 698, 556, 1846, 556, 698, 556, 698, 556, 1846, 556, 1846, 556, 1846, 556, 698, 556, 1846, 556, 698, 556, 698, 556, 1846, 556, 698, 556, 698, 556, 698, 556, 1846, 556, 698, 556, 1846, 556, 1846, 556,
				},
			},
		}, nil
	case "TO_BRIGHT":
		return []*hex.HexCode{
			{
				Format: hex.RAW,
				Raw: []int{
					9617, 4833, 583, 550, 583, 550, 583, 550, 583, 550, 583, 550, 583, 550, 583, 550, 583, 1811, 583, 1811, 583, 550, 583, 1811, 583, 550, 583, 550, 583, 550, 583, 1811, 583, 1811, 583, 550, 583, 1811, 583, 1811, 583, 1811, 583, 1811, 583, 550, 583, 550, 583, 1811, 583, 1811, 583, 550, 583, 550, 583, 550, 583, 550, 583, 1811, 583, 1811, 583, 550, 583, 54400, 9617, 4833, 583, 674, 583, 674, 583, 1811, 583, 674, 583, 674, 583, 674, 583, 674, 583, 1811, 583, 1811, 583, 674, 583, 674, 583, 674, 583, 1811, 583, 674, 583, 1811, 583, 674, 583, 674, 583, 1811, 583, 1811, 583, 1811, 583, 1811, 583, 674, 583, 674, 583, 1811, 583, 1811, 583, 674, 583, 674, 583, 674, 583, 674, 583, 1811, 583, 1811, 583, 674, 583,
				},
			},
		}, nil
	case "TO_DIM":
		return []*hex.HexCode{
			{
				Format: hex.RAW,
				Raw: []int{
					9606, 4850, 567, 569, 567, 569, 567, 569, 567, 569, 567, 569, 567, 569, 567, 569, 567, 1832, 567, 1832, 567, 569, 567, 1832, 567, 569, 567, 569, 567, 569, 567, 1832, 567, 1832, 567, 569, 567, 1832, 567, 1832, 567, 569, 567, 1832, 567, 569, 567, 569, 567, 1832, 567, 1832, 567, 569, 567, 569, 567, 1832, 567, 569, 567, 1832, 567, 1832, 567, 569, 567, 54407, 9606, 4850, 567, 681, 567, 681, 567, 1832, 567, 681, 567, 681, 567, 681, 567, 681, 567, 1832, 567, 1832, 567, 681, 567, 681, 567, 681, 567, 1832, 567, 681, 567, 1832, 567, 681, 567, 681, 567, 1832, 567, 1832, 567, 681, 567, 1832, 567, 681, 567, 681, 567, 1832, 567, 1832, 567, 681, 567, 681, 567, 1832, 567, 681, 567, 1832, 567, 1832, 567, 681, 567,
				},
			},
		}, nil
	}
	return nil, errors.New("invalid command provided")
}
