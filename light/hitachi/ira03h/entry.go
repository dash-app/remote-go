package ira03h

import (
	"errors"

	"github.com/dash-app/remote-go/appliances"
	"github.com/dash-app/remote-go/hex"
)

func (r *ira03h) Generate(req *appliances.Request) ([]*hex.HexCode, error) {
	e := req.Light()
	switch e.Action {
	case "OFF":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x03, 0xFC, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x03, 0xFC, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x03, 0xFC, 0xC2, 0x3D},
				},
			},
		}, nil
	case "ON", "ALL_LIGHT":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x02, 0xFD, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x02, 0xFD, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x02, 0xFD, 0xC2, 0x3D},
				},
			},
		}, nil
	case "NIGHT_LIGHT":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x09, 0xF6, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x09, 0xF6, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x09, 0xF6, 0xC2, 0x3D},
				},
			},
		}, nil
	case "FAV_01":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x0A, 0xF5, 0xF2, 0x0D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x0A, 0xF5, 0xF2, 0x0D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x0A, 0xF5, 0xF2, 0x0D},
				},
			},
		}, nil
	case "FAV_02":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x09, 0xF6, 0xF2, 0x0D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x09, 0xF6, 0xF2, 0x0D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x09, 0xF6, 0xF2, 0x0D},
				},
			},
		}, nil
	case "FAV_03":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x08, 0xF7, 0xF2, 0x0D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x08, 0xF7, 0xF2, 0x0D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x08, 0xF7, 0xF2, 0x0D},
				},
			},
		}, nil
	case "FAV_04":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x07, 0xF8, 0xF2, 0x0D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x07, 0xF8, 0xF2, 0x0D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x07, 0xF8, 0xF2, 0x0D},
				},
			},
		}, nil
	case "TO_BRIGHT":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x06, 0xF9, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x06, 0xF9, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x06, 0xF9, 0xC2, 0x3D},
				},
			},
		}, nil
	case "TO_DIM":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x07, 0xF8, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x07, 0xF8, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x07, 0xF8, 0xC2, 0x3D},
				},
			},
		}, nil
	case "TO_WARM":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x0F, 0xF0, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x0F, 0xF0, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x0F, 0xF0, 0xC2, 0x3D},
				},
			},
		}, nil
	case "TO_COOL":
		return []*hex.HexCode{
			{
				Code: [][]int{
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x0E, 0xF1, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x0E, 0xF1, 0xC2, 0x3D},
					{0x01, 0x10, 0x30, 0x50, 0xAF, 0x00, 0xFF, 0x0E, 0xF1, 0xC2, 0x3D},
				},
			},
		}, nil
	}

	return nil, errors.New("invalid command provided")
}
